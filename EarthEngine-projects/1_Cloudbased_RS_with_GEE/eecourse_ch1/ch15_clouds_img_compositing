// ---------- Section 1 -----------------
// Define the AOI.
var country = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')
.filter(ee.Filter.equals('country_na', 'Colombia'));

// Center the Map. The second parameter is zoom level.
Map.centerObject(country, 5); 

// We'll start by creating a composite from the Landsat 8 collection
// We define and use a function to apply scaling factors to the L8 C2 data
// Define time variables.
var startDate = '2019-01-01';
var endDate = '2019-12-31';

// Load and filter the Landsat 8 collection.
var landsat8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
.filterBounds(country)
.filterDate(startDate, endDate);

// Apply scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true).addBands(thermalBands, null, true);
}

landsat8 = landsat8.map(applyScaleFactors);

// Create composite.
var composite = landsat8.median().clip(country);
var visParams = {
    bands: ['SR_B4', 'SR_B3', 'SR_B2'],
    min: 0,
    max: 0.2
};
Map.addLayer(composite, visParams, 'L8 Composite');

// The resulting composite has lots of cloud cover. In tropical 
// regions it is very challenging to generate a high quality, cloud-free 
// composite without first filtering images for cloud cover even if our 
// collection is constrained to only include images acquired during the dry season
// Therefore, we will filter our collection by the CLOUD_COVER
// parameter to avoid cloudy images, starting with images that have less than 50%
// cloud cover.

// Filter by the CLOUD_COVER property.
var landsat8FiltClouds = landsat8
    .filterBounds(country)
    .filterDate(startDate, endDate)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 50));

// Create a composite from the filtered imagery.
var compositeFiltClouds = landsat8FiltClouds.median().clip(country);
Map.addLayer(compositeFiltClouds, visParams,
'L8 Composite cloud filter');

// Print size of collections, for comparison.
print('Size landsat8 collection', landsat8.size());
print('Size landsat8FiltClouds collection', landsat8FiltClouds.size()); 

// There is a tradeoff btw a stricter cloud cover threshold and
// data availability. Additionally, even with a cloud filter some areas still present cloud cover
// QA_PIXEL: provides useful info about certain conditions within the data
// and allow users to apply per pixel filters. 
// QA_RADSAT: indicates which bands are radiometrically saturated. 
// A pixel value of 1 means saturated so we will be masking these pixels

// Define the cloud mask function.
function maskSrClouds(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    
    var saturationMask = image.select('QA_RADSAT').eq(0);
    return image.updateMask(qaMask).updateMask(saturationMask);
    // updateMask excludes undesired pixels from the analysis
    // i.e., makes them transparent by taking the mask as input
}

// Apply the cloud mask to the collection.
var landsat8FiltMasked = landsat8FiltClouds.map(maskSrClouds);

//print('landsat8FiltMasked:', landsat8FiltMasked);

// Create a composite.
var landsat8compositeMasked = landsat8FiltMasked.median().clip(country);
Map.addLayer(landsat8compositeMasked, visParams, 'L8 composite masked');

// If an annual composite is not specifically required, a first approach is to create a
// two-year composite in order to mitigate the presence of data gaps or to have a
// series of rules that allows for selecting pixels for that particular year

// INCORPORATING DATA FROM OTHER SATELLITES
// Another option to reduce the presence of data gaps in cloudy situations
// is to bring in imagery from other sensors acquired during the time period of interest

// ---------- Section 2 -----------------
// Define Landsat 7 Level 2, Collection 2, Tier 1 collection.
var landsat7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2');

// Scaling factors for L7.
function applyScaleFactorsL7(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true).addBands(thermalBand, null, true);
}
// Filter collection, apply cloud mask, and scaling factors.
var landsat7FiltMasked = landsat7
    .filterBounds(country)
    .filterDate(startDate, endDate)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 50))
    .map(maskSrClouds)
    .map(applyScaleFactorsL7);

// Create composite.
var landsat7compositeMasked = landsat7FiltMasked.median().clip(country);

Map.addLayer(landsat7compositeMasked,
  {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'],
    min: 0,
    max: 0.2
  },
  'L7 composite masked'
); 

// Next we will combine the L7 and L8 collections

// Since Landsat 7 and 8 have different band designations,
// let's create a function to rename L7 bands to match to L8.
function rename(image) {
    return image.select(
    ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'],
    ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7']);
}
// Apply the rename function.
var landsat7FiltMaskedRenamed = landsat7FiltMasked.map(rename); 

// Merge Landsat collections.
var landsat78 = landsat7FiltMaskedRenamed
  .merge(landsat8FiltMasked.select(
    ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7']
  )) // selecting the bands we need from the L8
  .map(function(img) {
  return img.toFloat();
});
print('Merged collections', landsat78); // The result is a collection with about 1000 images


// Next we will take the median across the image collection

// Create Landsat 7 and 8 image composite and add to the Map.
var landsat78composite = landsat78.median().clip(country);
Map.addLayer(landsat78composite, visParams, 'L7 and L8 composite'); 

Map.centerObject(ee.Geometry.Point([-75.0741, 3.6023]), 10);

// Best-Available-Pixel Compositing Earth Engine Application

// Define required parameters.
var targetDay = '06-01';
var daysRange = 75;
var cloudsTh = 70;
var SLCoffPenalty = 0.7;
var opacityScoreMin = 0.2;
var opacityScoreMax = 0.3;
var cloudDistMax = 1500;
var despikeTh = 0.65;
var despikeNbands = 3;
var startYear = 2015;
var endYear = 2017;

// Define study area.
var worldCountries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');
var colombia = worldCountries.filter(ee.Filter.eq('country_na', 'Colombia'));

// Load the bap library.
var library = require('users/sfrancini/bap:library');

// Calculate BAP.
var BAPCS = library.BAP(null, targetDay, daysRange, cloudsTh, SLCoffPenalty, opacityScoreMin, opacityScoreMax, cloudDistMax);

// Despike the collection.
BAPCS = library.despikeCollection(despikeTh, despikeNbands, BAPCS, 1984, 2021, true);

// Infill datagaps (using temporal interpolation)
BAPCS = library.infill(BAPCS, 1984, 2021, false, true);

// Visualize the image.
Map.centerObject(colombia, 5);
library.ShowCollection(BAPCS, startYear, endYear, colombia, false, null);
library.AddSLider(startYear, endYear);


