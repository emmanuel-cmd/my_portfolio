// Get the Landsat 5 image collection
var imgCol = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2');

// How many Tier 1 Landsat 5 images have ever been collected?
print("All images ever: ", imgCol.size()); // A very large number

// How many images were collected in the 2000s?
var startDate = '2000-01-01';
var endDate = '2010-01-01';
var imgColfilteredByDate = imgCol.filterDate(startDate, endDate);
print("All images 2000-2010: ", imgColfilteredByDate.size());
// A smaller (but still large) number 

// filterBounds: returns an ImageCollection whose images surround a specified location
// With the code below, we'll count the number of images in the Shangai vicinity
// var ShanghaiImage = ee.Image('LANDSAT/LT05/C02/T1_L2/LT05_118038_20000606');
// Map.centerObject(ShanghaiImage, 9);

var imgColfilteredByDateHere = imgColfilteredByDate.filterBounds(Map.getCenter());
print("All images here, 2000-2010: ", imgColfilteredByDateHere.size()); // A smaller number

// filterMetadata: 
// Let us remove any images from our collection that has 50% or more cloudiness
var L5FilteredLowCloudImages = imgColfilteredByDateHere.filterMetadata('CLOUD_COVER', 'less_than', 50);

print("Less than 50% clouds in this area, 2000-2010", L5FilteredLowCloudImages.size()); // A smaller number

// You can chain the filter commands in one line of code
var chainedFilteredSet = imgCol.filterDate(startDate, endDate)
.filterBounds(Map.getCenter())
.filterMetadata('CLOUD_COVER', 'less_than', 50);
print('Chained: Less than 50% clouds in this area, 2000-2010', chainedFilteredSet.size()); 

// We chain the filters in a more efficient order - implementing filterBounds first
var efficientFilteredSet = imgCol.filterBounds(Map.getCenter())
.filterDate(startDate, endDate)
.filterMetadata('CLOUD_COVER', 'less_than', 50);
print('Efficient filtering: Less than 50% clouds in this area, 2000-2010', efficientFilteredSet.size()); 

// It is good practise in Earth engine to order the filters with the filterBounds first
// followed by metadata filters in order of specificity

// Mapping over ImageCollections in Earth Engine
//.map (verb) represents the idea of performing a set of actions repeatedly on a set

// First we create a function that applies specific actions to each images 
// in an ImageCollection

var makeLandsat5EVI = function(oneL5Image) {
  
    // compute the EVI for any Landsat 5 image. Note it's specific to
    // Landsat 5 images due to the band numbers. Don't run this exact
    // function for images from sensors other than Landsat 5.
    
    // Extract the bands and divide by 1e4 to account for scaling done.
    var nirScaled = oneL5Image.select('SR_B4').divide(10000);
    var redScaled = oneL5Image.select('SR_B3').divide(10000);
    var blueScaled = oneL5Image.select('SR_B1').divide(10000);
    
    // Calculate the numerator, note that order goes from left to right.
    var numeratorEVI = (nirScaled.subtract(redScaled)).multiply(2.5);
    
    // Calculate the denominator
    var denomClause1 = redScaled.multiply(6);
    var denomClause2 = blueScaled.multiply(7.5);
    var denominatorEVI = nirScaled.add(denomClause1).subtract(denomClause2).add(1);
    
    // Calculate EVI and name it.
    var landsat5EVI = numeratorEVI.divide(denominatorEVI).rename('EVI');
    return ((oneL5Image.addBands(landsat5EVI)));

}; 

// Let us apply this function to our cloud-filtered collection and display it
print('What Im getting:', efficientFilteredSet.get(1));
//var L5EVIimages = efficientFilteredSet.map(makeLandsat5EVI);

print('Verifying that the .map gives back the same number of images: ', L5EVIimages.size());
print(L5EVIimages);
Map.addLayer(L5EVIimages, {}, 'L5EVIimages', 1, 1); 

// Section 3: Reducing an Image Collection
// The third part in the filter, map, reduce paradigm is reducing values in an ImageCollection
// to extract meaningful values
// EE provides a large set of reducers for reducing a set of value to a summary statistic
// The code below computes the mean value at every pixel of the ImageCollection

var L5EVImean = L5EVIimages.reduce(ee.Reducer.mean());
print(L5EVImean);

Map.addLayer(L5EVImean, {
    min: -1,
    max: 2,
    palette: ['red', 'white', 'green']
}, 'Mean EVI');


// Using the same principle, the code below computes the median 
// of the ImageCollection at every pixel

var L5EVImedian = L5EVIimages.reduce(ee.Reducer.median());
print(L5EVImedian);

Map.addLayer(L5EVImedian, {
    min: -1,
    max: 2,
    palette: ['red', 'white', 'green']
}, 'Median EVI');


