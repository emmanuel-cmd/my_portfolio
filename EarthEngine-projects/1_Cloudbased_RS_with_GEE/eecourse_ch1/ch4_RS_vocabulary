/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mod09 = ee.ImageCollection("MODIS/061/MOD09A1"),
    tm = ee.ImageCollection("LANDSAT/LT05/C02/T1"),
    msi = ee.ImageCollection("COPERNICUS/S2"),
    naip = ee.ImageCollection("USDA/NAIP/DOQQ"),
    eo1 = ee.ImageCollection("EO1/HYPERION");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//////
// Explore spatial resolution
//////

// Define a region of interest as a point at San Francisco airport.
var sfoPoint = ee.Geometry.Point(-122.3774, 37.6194);

// Center the map at that point.
Map.centerObject(sfoPoint, 16);  // zoom level of 16

// MODIS
// Get an image from your imported MODIS MYD09GA collection.
var modisImage = mod09.filterDate('2020-02-01', '2020-03-01').first();

// Use these MODIS bands for near infrared, red, and green, respectively.
var modisBands = ['sur_refl_b02', 'sur_refl_b01', 'sur_refl_b04'];

// Define visualization parameters for MODIS.
var modisVis = {
  bands: modisBands,
  min: 0,
  max: 3000
};

// Add the MODIS image to the map.
Map.addLayer(modisImage, modisVis, 'MODIS',0);

// Get the scale of the data from the NIR band's projection:
var modisScale = modisImage.select('sur_refl_b02').projection().nominalScale();
print('MODIS NIR scale:', modisScale);

// Comparing the MODIS to TM (Landsat) image 

// TM
// Filter TM imagery by location and date.
var tmImage = tm.filterBounds(Map.getCenter())
.filterDate('1987-03-01', '1987-08-01')
.first();

// Display the TM image as a false color composite.
Map.addLayer(
  tmImage, 
  {
    bands: ['B4', 'B3', 'B2'],
    min: 0,
    max: 100
  }, 
  'TM', 
  0
);

// Notice how many more pixels are displayed on your screen
// in comparison to the MODIS image

// Get the scale of the TM data from its projection:
var tmScale = tmImage.select('B4').projection().nominalScale();
print('TM NIR scale:', tmScale);

// MSI (on the Sentinel-2 satellites)

// MSI
// Filter MSI imagery by location and date.
var msiImage = msi
.filterBounds(Map.getCenter())
.filterDate('2020-02-01', '2020-04-01')
.first();

// Display the MSI image as a false color composite.
Map.addLayer(msiImage, 
  {
    bands: ['B8', 'B4', 'B3'],
    min: 0,
    max: 2000
  }, 
  'MSI', 
  0
);

// Check the scale of the MSI image in metres
var msiScale = msiImage.select('B8').projection().nominalScale();
print('MSI NIR Scale', msiScale);

// NAIP (Resolution: 0.5-2m)

// NAIP
// Get NAIP images for the study period and region of interest.
var naipImage = naip
.filterBounds(Map.getCenter())
.filterDate('2018-01-01', '2018-12-31')
.first();

// Display the NAIP mosaic as a color-IR composite.
Map.addLayer(
  naipImage, 
  {
    bands: ['N', 'R', 'G']
  }, 
  'NAIP', 
  0
);

// Get the NAIP resolution from the first image in the mosaic.
var naipScale = naipImage.select('N').projection().nominalScale();

print('NAIP NIR scale:', naipScale);

// TEMPORAL RESOLUTION
/////
// Explore Temporal Resolution
/////
// Use Print to see Landsat revisit time
print('Landsat-5 series:', tm
.filterBounds(Map.getCenter())
.filterDate('1987-06-01', '1987-09-01'));

// Create a chart to see Landsat 5's 16 day revisit time.
var tmChart = ui.Chart.image.series({
  imageCollection: tm.select('B4').filterDate('1987-06-01', '1987-09-01'), 
  region: sfoPoint
}).setSeriesNames(['NIR']);

// it is difficult to see individual dates when the image was collected
// therefore we..

// Define a chart style that will let us see the individual dates.
var chartStyle = {
  hAxis: {
    title: 'Date'
  },
  vAxis: {
    title: 'NIR Mean'
  },
  series: {
  0: {
    lineWidth: 3,
    pointSize: 6
    }
  },
};
// Apply custom style properties to the chart.
tmChart.setOptions(chartStyle);

// Print the chart.
print('TM Chart', tmChart);

// SENTINEL-2 
// Sentinel-2 has a 5 day revisit time.
var msiChart = ui.Chart.image.series({
  imageCollection: msi.select('B8').filterDate('2020-06-01', '2020-09-01'),
  region: sfoPoint
}).setSeriesNames(['NIR']);


// Apply the previously defined custom style properties to the chart.
msiChart.setOptions(chartStyle);

// Print the chart.
print('MSI Chart', msiChart);

// Spectral Resolution: the number & width of spectral bands in which the sensor takes measurements
// Let us compare the multispectral MODIS instrument with the hyperspectral
// Hyperion sensor aboard the EO-1 satellite, which is also available in Earth Engine


// MODIS
/////
// Explore spectral resolution
/////

// Get the MODIS band names as an ee.List
var modisBands = modisImage.bandNames();

// Print the list.
print('MODIS bands:', modisBands);

// Print the length of the list.
print('Length of the bands list:', modisBands.length());

// Note that not all of the bands are spectral bands.

// Graph the MODIS spectral bands (bands 11-17).
// Select only the reflectance bands of interest.
var reflectanceImage = modisImage.select(
    'sur_refl_b01',
    'sur_refl_b02',
    'sur_refl_b03',
    'sur_refl_b04',
    'sur_refl_b05',
    'sur_refl_b06',
    'sur_refl_b07'
);

// Define an object of customization parameters for the chart.
var options = {
  title: 'MODIS spectrum at SFO',
    hAxis: {
      title: 'Band'
    },
    vAxis: {
      title: 'Reflectance'
    },
    legend: {
      position: 'none'
    },
  pointSize: 3
};

// Make the chart.
var modisReflectanceChart = ui.Chart.image.regions({
  image: reflectanceImage,
  regions: sfoPoint
}).setOptions(options);

// Display the chart.
print(modisReflectanceChart);

// EO-1
// Get the EO-1 band names as a ee.List
var eo1Image = eo1.filterDate('2015-01-01', '2016-01-01').first();

// Extract the EO-1 band names.
var eo1Bands = eo1Image.bandNames();

// Print the list of band names.
print('EO-1 bands:', eo1Bands);

// Print the length of the list.
print('Length of the EO-1 bands list:', eo1Bands.length());

// Create an options object for our chart.
var optionsEO1 = {
  title: 'EO1 spectrum',
  hAxis: {
    title: 'Band'
  },
  vAxis: {
    title: 'Reflectance'
  },
  legend: {
    position: 'none'
  },
  pointSize: 3
};
// Make the chart and set the options.
var eo1Chart = ui.Chart.image.regions({
  image: eo1Image,
  regions: ee.Geometry.Point([6.10, 81.12])
}).setOptions(optionsEO1);

// Display the chart.
print(eo1Chart);

/////
// Examine pixel quality
/////

// Sentinel Quality Visualization.
var msiCloud = msi
.filterBounds(Map.getCenter())
.filterDate('2019-12-31', '2020-02-01')
.first();

print(msiCloud)

// Display the Sentinel-2 image as a false color composite
Map.addLayer(
  msiCloud, 
  {
    bands: ['B8', 'B4', 'B3'], 
    min: 0, 
    max: 2000
  }, 
  'MSI Quality Image', 
  0
)

Map.addLayer(
  msiCloud, 
  {
    bands: ['QA60'], 
    min: 0, 
    max: 3000
  }, 
  'Sentinel Quality Visualization', 
  0
);

/////
// Metadata
/////
print('MSI Image Metadata', msiImage);

// Image-level Cloud info
var msiCloudiness = msiImage.get('CLOUDY_PIXEL_PERCENTAGE');
print('MSI CLOUDY_PIXEL_PERCENTAGE:', msiCloudiness);

// SYNTHESIS

// Create a plot of spectral resolution for one of the other sensors described in
// this chapter. What are the bands called? What wavelengths of the electromagnetic
// spectrum do they correspond to?

// Extract the Landsat band names.
var tmBands = tmImage.bandNames();

// Print the list of band names.
print('Landsat bands:', tmBands);

// Print the length of the list.
print('Length of the Landsat bands list:', tmBands.length());

var tmReflectanceImage = tmImage.select(
  'B1', 
  'B2', 
  'B3', 
  'B4', 
  'B5', 
  'B6', 
  'B7'
)

// Define an object of customization parameters for the chart.
var options = {
  title: 'Landsat spectrum at SFO',
    hAxis: {
      title: 'Band'
    },
    vAxis: {
      title: 'Reflectance'
    },
    legend: {
      position: 'none'
    },
  pointSize: 3
};

// Make the chart.
var tmReflectanceChart = ui.Chart.image.regions({
  image: tmReflectanceImage,
  regions: sfoPoint
}).setOptions(options);

// Display the chart.
print(tmReflectanceChart);

// Assignment 2: Extract spatial resolutions for the ffg sensors
var modisB01Scale = modisImage.select('sur_refl_b01').projection().nominalScale();
var msiB5Scale = msiImage.select('B5').projection().nominalScale();
var naipScale = naipImage.select('R').projection().nominalScale();

// Assignment 3: 
var dsPoint = ee.Geometry.Point([-122.30144, 37.80215]);

// How many MYD09A1 images are there in this point?
var mod09ImageCount = mod09.filterBounds(dsPoint).filterDate('2017-01-01', '2017-12-31').size();
print("Number of MODIS images in 2017:", mod09ImageCount);

// How many Sentinel-2 MSI surface reflectance images are there in this point?
var msiImageCount = msi.filterBounds(dsPoint)
.filterDate('2017-01-01', '2017-12-31')
.select(
   '[B].*'
  ).size();

print("Number of MSI surface reflectance images:", msiImageCount);
