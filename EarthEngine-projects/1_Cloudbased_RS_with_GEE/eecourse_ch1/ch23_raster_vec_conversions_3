// Raster Properties to Vector Fields
// Load required datasets.
var gfc = ee.Image('UMD/hansen/global_forest_change_2020_v1_8');
var wdpa = ee.FeatureCollection('WCMC/WDPA/current/polygons');

// Display deforestation.
var deforestation = gfc.select('lossyear');
Map.addLayer(
  deforestation, 
  {
    min: 1,
    max: 20,
    palette: ['yellow', 'orange', 'red']
  }, 
  'Deforestation raster'
);
// Select protected areas in the Colombian Amazon.
var amazonianProtectedAreas = [
    'Cordillera de los Picachos', 'La Paya', 'Nukak',
    'Serrania de Chiribiquete',
    'Sierra de la Macarena', 'Tinigua'
];
var wdpaSubset = wdpa.filter(ee.Filter.inList('NAME', amazonianProtectedAreas));

// Display protected areas as an outline.
var protectedAreasOutline = ee.Image().byte().paint({
    featureCollection: wdpaSubset,
    color: 1,
    width: 1
});

Map.addLayer(
  protectedAreasOutline, 
  {
    palette: 'white'
  }, 
  'Amazonian protected areas'
);

// Set up map display.
Map.centerObject(wdpaSubset);
Map.setOptions('SATELLITE');
var scale = deforestation.projection().nominalScale();

// Use 'reduceRegions' to sum together pixel areas in each protected area.
wdpaSubset = deforestation.gte(1)
  .multiply(ee.Image.pixelArea().divide(10000)) // convert m^2 to hectares
  .reduceRegions({
    collection: wdpaSubset,
    reducer: ee.Reducer.sum().setOutputs(['deforestation_area']),
    scale: scale
});
  
print(wdpaSubset); // Note the new 'deforestation_area' property. 

// Normalize by area.
wdpaSubset = wdpaSubset.map(
  function(feat) {
    return feat.set('deforestation_rate', 
    ee.Number(feat.get('deforestation_area'))
    .divide(feat.area().divide(10000)) // divide by total area (in m2 to ha)
    .divide(20) // number of years
    .multiply(100)); // to percentage points
});
// Print to identify rates of change per protected area.
// Which has the fastest rate of loss?
print(
  wdpaSubset.reduceColumns({
    reducer: ee.Reducer.toList().repeat(2),
    selectors: ['NAME', 'deforestation_rate']
  })
);

// Section 2: Vector-to-Raster Conversion
// In this section, we will rasterize the protected areas vector
// to produce a mask and use this to assess rates of change

// Generate a new property called 'protected' to apply to the output mask.
var wdpa = wdpa.map(function(feat) {
  return feat.set('protected', 1);
});

// Rasterize using the new property.
// unmask() sets areas outside protected area polygons to 0.
var wdpaMask = wdpa.reduceToImage(['protected'], ee.Reducer.first()).unmask();

// Center on Colombia.
Map.setCenter(-75, 3, 6);

// Display on map.
Map.addLayer(
  wdpaMask, 
  {
    min: 0,
    max: 1
  }, 
  'Protected areas (mask)'
); 

// Set the deforestation layer to 0 where outside a protected area.
var deforestationProtected = deforestation.where(wdpaMask.eq(0), 0);

// Update mask to hide where deforestation layer = 0
var deforestationProtected = deforestationProtected.updateMask(deforestationProtected.gt(0));

// Display deforestation in protected areas
Map.addLayer(
  deforestationProtected, 
  {
    min: 1,
    max: 20,
    palette: ['yellow', 'orange', 'red']
  }, 
  'Deforestation protected'
); 
// In the above example, we generated a simple binary mask 
// but reduceToImage can also preserve a numerical property 
// of the input polygons
// For example, we might want to determine which protected area
// each pixel represents: in this case, we produce an img with the 
// unique ID of each protected area

// Produce an image with unique ID of protected areas.
var wdpaId = wdpa.reduceToImage(['WDPAID'], ee.Reducer.first());

Map.addLayer(
  wdpaId, 
  {
    min: 1,
    max: 100000
  }, 
  'Protected area ID'
);

