
// Assignment:
// Analyze cross-correlation between NDVI and soil moisture, or
// precipitation and soil moisture, for example. Earth Engine contains different soil
// moisture datasets in its catalog (e.g., NASA-USDA SMAP, NASA-GLDAS). Try
// increasing the lagged time and see if it makes any difference. Alternatively, you
// can pick any other environmental variable/index (e.g., a different vegetation index:
// EVI instead of NDVI, for example) and analyze its autocorrelation.  

// Define function to mask clouds, scale, and add variables
// (NDVI, time and a constant) to Landsat 8 imagery.
function maskScaleAndAddVariable(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);
    // Apply the scaling factors to the appropriate bands.
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    // Replace the original bands with the scaled ones and apply the masks.
    var img = image.addBands(opticalBands, null, true)
        .addBands(thermalBands, null, true)
        .updateMask(qaMask)
        .updateMask(saturationMask);
    var imgScaled = image.addBands(img, null, true);
    // Now we start to add variables of interest.
    // Compute time in fractional years since the epoch.
    var date = ee.Date(image.get('system:time_start'));
    var years = date.difference(ee.Date('1970-01-01'), 'year');
    var timeRadians = ee.Image(years.multiply(2 * Math.PI));
    // Return the image with the added bands.
    return imgScaled
        // Add an NDVI band.
        .addBands(imgScaled.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI'))
        // Add an EVI band
        .addBands(imgScaled.expression(
          '2.5 * ((NIR-RED) / (NIR + 6 * RED - 7.5* BLUE +1))', {
            NIR:imgScaled.select('SR_B5'),
            RED:imgScaled.select('SR_B4'),
            BLUE:imgScaled.select('SR_B2')
          }).rename('EVI'))
        // Add a time band.
        .addBands(timeRadians.rename('t')).float()
        // Add a constant band.
        .addBands(ee.Image.constant(1));
}


// Import region of interest. Area over California.
var roi = ee.Geometry.Polygon([
    [-119.44617458417066,35.92639730653253],
    [-119.07675930096754,35.92639730653253],
    [-119.07675930096754,36.201704711823844],
    [-119.44617458417066,36.201704711823844],
    [-119.44617458417066,35.92639730653253]
]);

// Import the USGS Landsat 8 Level 2, Collection 2, Tier 1 collection,
// filter, mask clouds, scale, and add variables.
var landsat8sr = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filterBounds(roi)
    .filterDate('2013-01-01', '2018-01-01')
    .map(maskScaleAndAddVariable);

// print('Landsat8SR:', landsat8sr)

// Set map center.
Map.centerObject(roi, 10);

// Function that creates a lagged collection.
var lag = function(leftCollection, rightCollection, lagDays)
{
  var filter = ee.Filter.and(
    ee.Filter.maxDifference({
      difference: 1000 * 60 * 60 * 24 * lagDays,
      leftField: 'system:time_start',
      rightField: 'system:time_start'
    }),
    ee.Filter.greaterThan({
      leftField: 'system:time_start',
      rightField: 'system:time_start'
    }));
    return ee.Join.saveAll({
      matchesKey: 'images',
      measureKey: 'delta_t',
      ordering: 'system:time_start',
      ascending: false, // Sort reverse chronologically
    }).apply({
      primary: leftCollection,
      secondary: rightCollection,
      condition: filter
  });
}; 
// Function to compute covariance.
var covariance = function(mergedCollection, band, lagBand) {
  return mergedCollection.select([band, lagBand])
      .map(function(image) {
        return image.toArray();
      }).reduce(ee.Reducer.covariance(), 8);
};

// Define the correlation function.
var correlation = function(vcArrayImage) {
    var covariance = ee.Image(vcArrayImage).arrayGet([0, 1]);
    var sd0 = ee.Image(vcArrayImage).arrayGet([0, 0]).sqrt();
    var sd1 = ee.Image(vcArrayImage).arrayGet([1, 1]).sqrt();
    return covariance.divide(sd0).divide(sd1).rename('correlation');
};

// Function to stack bands.
var merge = function(image) {
  // Function to be passed to iterate.
  var merger = function(current, previous) {
      return ee.Image(previous).addBands(current);
  };
  return ee.ImageCollection.fromImages(image.get('images'))
        .iterate(merger, image);
};

//  Soil moisture (covariate)
var soilmois = ee.ImageCollection("NASA/SMAP/SPL3SMP_E/005");

// Join the soil moisture data set to the landsat
var lag1soilmoisNDVI = lag(landsat8sr, soilmois, 30)

// Add the soil moisture images as bands
var merged1soilmoisNDVI = ee.ImageCollection(lag1soilmoisNDVI.map(merge));

// Compute and display cross covariance
var cov1soilmoisNDVI = covariance(merged1soilmoisNDVI, 'NDVI', 'soil_moisture_am').clip(roi);

Map.addLayer(
  cov1soilmoisNDVI.arrayGet([0, 1]), 
  {
    min: -0.5,
    max: 0.5
  }, 
  'NDVI - soil moisture (lag=5)'
);

// print(cov1soilmoisNDVI);

// Compute and display cross correlation
var corr1soilmoisNDVI = correlation(cov1soilmoisNDVI).clip(roi);

Map.addLayer(
  corr1soilmoisNDVI, 
  {
    min: -0.5,
    max: 0.5
  }, 
  'NDVI - soil moisture corr (lag = 5)'
);

// Anayze the autocorrelation of the EVI index

// List of the independent variable names.
var independents = ee.List(['constant', 't']);

// Name of the dependent variable.
var dependent = ee.String('EVI');

// Compute a linear trend. This will have two bands: 'residuals' and
// a 2x1 band called coefficients (columns are for dependent variables).
var trend = landsat8sr.select(independents.add(dependent))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
// Flatten the coefficients into a 2-band image
var coefficients = trend.select('coefficients')
    // Get rid of extra dimensions and convert back to a regular image
    .arrayProject([0])
    .arrayFlatten([independents]);

// Compute a detrended series.
var detrended = landsat8sr.map(function(image) {
  return image.select(dependent)
    .subtract(image.select(independents).multiply(coefficients)
    .reduce('sum'))
    .rename(dependent)
    .copyProperties(image, ['system:time_start']);
});

// Create a lagged collection of the detrended imagery.
var lagged17 = lag(detrended, detrended, 17);

// Function to stack bands.
var merge = function(image) {
  // Function to be passed to iterate.
  var merger = function(current, previous) {
      return ee.Image(previous).addBands(current);
  };
  return ee.ImageCollection.fromImages(image.get('images'))
        .iterate(merger, image);
};

// Apply merge function to the lagged collection.
var merged17 = ee.ImageCollection(lagged17.map(merge)); 

// Concatenate the suffix to the NDVI band.
var lagBand = dependent.cat('_1');
// print('lagband:', lagBand);

// Compute covariance.
var covariance17 = ee.Image(covariance(merged17, dependent, lagBand))
    .clip(roi);

Map.addLayer(covariance17.arrayGet([0, 1]),
  {
    min: 0,
    max: 0.02
  },
  'EVI covariance (lag = 17 days)'
);

// Apply the correlation function.
var correlation17 = correlation(covariance17).clip(roi);
Map.addLayer(
  correlation17,
  {
    min: -1,
    max: 1
  },
  'EVI correlation (lag = 17 days)'
);



