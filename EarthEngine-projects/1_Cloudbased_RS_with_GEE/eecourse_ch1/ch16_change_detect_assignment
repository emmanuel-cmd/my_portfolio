// Define function to mask clouds, scale, and add variables
// (NDVI, time and a constant) to Landsat 8 imagery.
function maskScaleAndAddVariable(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);
    
    // Apply the scaling factors to the appropriate bands.
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    
    // Replace the original bands with the scaled ones and apply the masks.
    var img = image.addBands(opticalBands, null, true)
        .addBands(thermalBands, null, true)
        .updateMask(qaMask)
        .updateMask(saturationMask);
    
    var imgScaled = image.addBands(img, null, true);
    // Now we start to add variables of interest.
    // Compute time in fractional years since the epoch.
    var date = ee.Date(image.get('system:time_start'));
    var years = date.difference(ee.Date('1970-01-01'), 'year');
    // Return the image with the added bands.
    return imgScaled
}

// Section 1: Preparing Imagery
var landsat8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2');

// Split the L8 collection into: pre and post event images
var point = ee.Geometry.Point([-123.64, 42.96]);
Map.centerObject(point, 11);

var preImage = landsat8
  .filterBounds(point)
  .filterDate('2013-06-01', '2013-06-30')
  .map(maskScaleAndAddVariable)
  .sort('CLOUD_COVER', true)
  .first();
  
var postImage = landsat8
  .filterBounds(point)
  .filterDate('2020-06-01', '2020-06-30')
  .map(maskScaleAndAddVariable)
  .sort('CLOUD_COVER', true)
  .first();
  
// print(preImage);

preImage = preImage  
.select( // rename to band names to improve readability
    ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
    ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']
  ); 
  
postImage = postImage
.select( // rename to band names to improve readability
    ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
    ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']
  );
  
// Using tasseled cap transformation 

var landsat8RT = ee.Array([
    [0.3029, 0.2786, 0.4733, 0.5599, 0.508, 0.1872],
    [-0.2941, -0.243, -0.5424, 0.7276, 0.0713, -0.1608],
    [0.1511, 0.1973, 0.3283, 0.3407, -0.7117, -0.4559],
    [-0.8239, 0.0849, 0.4396, -0.058, 0.2013, -0.2773],
    [-0.3294, 0.0557, 0.1056, 0.1855, -0.4349, 0.8085],
    [0.1079, -0.9023, 0.4119, 0.0575, -0.0259, 0.0252]
]);

print('RT for Landsat 8', landsat8RT);

// For matrix multiplication, first convert the multiband image 
// to an array image
var bands = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2'];
var arraypreImage1D = preImage.select(bands).toArray();
var arraypostImage1D = postImage.select(bands).toArray();

// Make an array with two dimensions
var arraypreImage2D = arraypreImage1D.toArray(1);
var arraypostImage2D = arraypostImage1D.toArray(1);

// Multiply RT by p0.
var tasselCappreImageL8 = ee.Image(landsat8RT)
    // Multiply the tasseled cap coefficients by the array
    // made from the 6 bands for each pixel.
    .matrixMultiply(arraypreImage2D)
    // Get rid of the extra dimensions.
    .arrayProject([0])
    // Get a multi-band image with TC-named bands.
    .arrayFlatten(
    [
      ['brightness', 'greenness', 'wetness',
      'fourth', 'fifth',
      'sixth'
      ]
]);

var tasselCappostImageL8 = ee.Image(landsat8RT)
    // Multiply the tasseled cap coefficients by the array
    // made from the 6 bands for each pixel.
    .matrixMultiply(arraypostImage2D)
    // Get rid of the extra dimensions.
    .arrayProject([0])
    // Get a multi-band image with TC-named bands.
    .arrayFlatten(
    [
      ['brightness', 'greenness', 'wetness',
      'fourth', 'fifth',
      'sixth'
      ]
]);

// This maps brightness to red, greenness to green, and wetness to blue.
// Water appears blue, healthy irrigated crops are the bright circles, and drier crops are red.
var vizParams = {
    bands: ['brightness', 'greenness', 'wetness'],
    min: -0.1,
    max: [0.5, 0.4, 0.4]
};

Map.addLayer(tasselCappreImageL8, vizParams, 'TC-pre-img');
Map.addLayer(tasselCappostImageL8, vizParams, 'TC-post-img');

// Calculate difference and map
var diff_tc = tasselCappostImageL8.subtract(tasselCappreImageL8);

var palette = [
    '011959', '0E365E', '1D5561', '3E6C55', '687B3E',
    '9B882E', 'D59448', 'F9A380', 'FDB7BD', 'FACCFA'
];
var vizzParams = {
    bands: ['brightness', 'greenness', 'wetness'],
    min: -0.1,
    max: 0.5
};

Map.addLayer(diff_tc, vizzParams, 'change-TC');

// Classify change
var threshGain = 0.05;
var threshLoss = -0.05;
var tcdiffclassified = ee.Image(0);
tcdiffclassified = tcdiffclassified.where(diff_tc.select('greenness').lte(threshLoss), 2);
tcdiffclassified = tcdiffclassified.where(diff_tc.select('greenness').gte(threshGain), 1);

var changeVis = {
    palette: 'fcffc8,2659eb,fa1373',
    min: 0,
    max: 2
};

Map.addLayer(
    tcdiffclassified.selfMask(),
    changeVis,
    'change-TC classified by threshold'
);






